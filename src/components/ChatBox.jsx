import { useState, useRef, useEffect } from "react";
import axios from "axios";
import ChatIcon from "./ChatIcon";
import ReactMarkdown from "react-markdown";

const ChatBox = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isBotTyping, setIsBotTyping] = useState(false);
  const [messages, setMessages] = useState([
    { sender: "bot", text: "Xin ch√†o! B·∫°n c·∫ßn gi√∫p g√¨?" },
  ]);
  const [input, setInput] = useState("");

  const messagesEndRef = useRef(null);
  const isSendingRef = useRef(false);
  const replyTimeoutRef = useRef(null);

  // M·∫´u tr·∫£ l·ªùi c·ªßa Bot v·ªõi Markdown
  const sampleReply = `**Gi√° h·ªôp gi·∫£m t·ªëc** ph·ª• thu·ªôc v√†o nhi·ªÅu y·∫øu t·ªë nh∆∞:  

1. *Lo·∫°i h·ªôp gi·∫£m t·ªëc*:  
   - *H·ªôp gi·∫£m t·ªëc b√°nh rƒÉng tr·ª•* (Helical, Spur Gear)  
   - *H·ªôp gi·∫£m t·ªëc h√†nh tinh* (Planetary Gearbox)  
   - *H·ªôp gi·∫£m t·ªëc Cycloid*  
   - *H·ªôp gi·∫£m t·ªëc Worm* (Tr·ª•c v√≠t - b√°nh v√≠t)  

2. *C√¥ng su·∫•t v√† t·ª∑ s·ªë truy·ªÅn*:  
   - C√¥ng su·∫•t c√†ng cao, gi√° c√†ng ƒë·∫Øt (t·ª´ v√†i trƒÉm ngh√¨n ƒë·∫øn h√†ng trƒÉm tri·ªáu ƒë·ªìng).  
   - T·ª∑ s·ªë truy·ªÅn ph·ª©c t·∫°p (v√≠ d·ª• 1:100, 1:200) th∆∞·ªùng ƒë·∫Øt h∆°n t·ª∑ s·ªë ƒë∆°n gi·∫£n (1:10, 1:20).  

3. *Th∆∞∆°ng hi·ªáu v√† xu·∫•t x·ª©*:  
   - *H√†ng Vi·ªát Nam* (H·ªìng K√Ω, Nh·∫≠t Minh, Thi√™n Ph√∫): 2‚Äì50 tri·ªáu ƒë·ªìng.  
   - *H√†ng Trung Qu·ªëc* (SEW, Nord, Bonfiglioli): 5‚Äì100 tri·ªáu ƒë·ªìng.  
   - *H√†ng Nh·∫≠t/ƒê·ª©c* (Sumitomo, Siemens, Rexroth): 10‚Äì200 tri·ªáu ƒë·ªìng.  

4. *K√≠ch th∆∞·ªõc v√† v·∫≠t li·ªáu*:  
   - H·ªôp nh·ªè (d√πng cho motor c√¥ng su·∫•t d∆∞·ªõi 1kW) c√≥ gi√° t·ª´ 1‚Äì5 tri·ªáu ƒë·ªìng.  
   - H·ªôp l·ªõn (c√¥ng nghi·ªáp n·∫∑ng) c√≥ th·ªÉ l√™n t·ªõi 50‚Äì200 tri·ªáu ƒë·ªìng.  

### B√°o gi√° tham kh·∫£o (t√πy model):
- *H·ªôp gi·∫£m t·ªëc mini (0.1‚Äì1kW)*: 1‚Äì5 tri·ªáu ƒë·ªìng.  
- *H·ªôp gi·∫£m t·ªëc c√¥ng nghi·ªáp (3‚Äì20kW)*: 10‚Äì50 tri·ªáu ƒë·ªìng.  
- *H·ªôp gi·∫£m t·ªëc cao c·∫•p (30‚Äì100kW)*: 50‚Äì200 tri·ªáu ƒë·ªìng.  

**L·ªùi khuy√™n**:  
- Li√™n h·ªá nh√† cung c·∫•p ƒë·ªÉ ƒë∆∞·ª£c b√°o gi√° ch√≠nh x√°c theo nhu c·∫ßu.  
- Ki·ªÉm tra th√¥ng s·ªë k·ªπ thu·∫≠t tr∆∞·ªõc khi mua.  

B·∫°n c·∫ßn h·ªôp gi·∫£m t·ªëc cho ·ª©ng d·ª•ng c·ª• th·ªÉ n√†o? M√¨nh c√≥ th·ªÉ t∆∞ v·∫•n chi ti·∫øt h∆°n!`;

  // H√†m cu·ªôn xu·ªëng cu·ªëi tin nh·∫Øn
  const scrollToBottom = () => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages, isBotTyping]);

  useEffect(() => {
    const handleGlobalKeyDown = (e) => {
      if (e.key === "Escape") {
        setIsOpen(false);
      }
    };

    if (isOpen) {
      window.addEventListener("keydown", handleGlobalKeyDown);
    }
    return () => window.removeEventListener("keydown", handleGlobalKeyDown);
  }, [isOpen]);

  const sendMessage = async (text) => {
    if (isSendingRef.current || isBotTyping) return;

    isSendingRef.current = true;
    setIsBotTyping(true);

    const userMessage = { sender: "user", text };
    setMessages((prev) => [...prev, userMessage]);

    setTimeout(() => {
      isSendingRef.current = false;
    }, 0);

    if (replyTimeoutRef.current) {
      clearTimeout(replyTimeoutRef.current);
      replyTimeoutRef.current = null;
    }

    replyTimeoutRef.current = setTimeout(async () => {
      try {
        const response = await axios.post("https://your-api-url.com/chat", {
          message: text,
        });

        const replyText = response.data.reply?.trim();
        const formattedReply = `ü§ñ Bot: ${
          replyText && replyText !== "." ? replyText : sampleReply
        }`;

        const botReply = { sender: "bot", text: formattedReply };
        setMessages((prev) => [...prev, botReply]);
      } catch (error) {
        console.error("Error calling bot API:", error);
        const errorReply = {
          sender: "bot",
          text: "‚ùó C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i sau!",
        };
        setMessages((prev) => [...prev, errorReply]);
      } finally {
        setIsBotTyping(false);
        replyTimeoutRef.current = null;
      }
    }, 1000);
  };

  const handleKeyDown = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      const currentInput = input.trim();
      if (currentInput !== "" && !isBotTyping) {
        sendMessage(currentInput);
        setInput("");
      }
    }
  };

  const handleSendClick = () => {
    const currentInput = input.trim();
    if (currentInput !== "" && !isBotTyping) {
      sendMessage(currentInput);
      setInput("");
    }
  };

  return (
    <div className="fixed bottom-[30px] right-[20px] z-50">
      {isOpen ? (
        <div className="w-[350px] h-[500px] bg-white rounded-[15px] shadow-xl flex flex-col overflow-hidden">
          <div className="bg-[#56D3C7] text-white px-4 py-3 font-semibold flex justify-between items-center">
            <span>Chat h·ªó tr·ª£</span>
            <button onClick={() => setIsOpen(false)}>‚úï</button>
          </div>
          <div className="flex-1 p-4 overflow-y-auto space-y-[20px]">
            {messages.map((msg, index) => (
              <div
                key={index}
                className={`text-sm px-3 py-2 rounded-[15px] max-w-[80%] ${
                  msg.sender === "user"
                    ? "bg-[#DCF8C6] self-end ml-auto"
                    : "bg-[#F1F1F1] border border-gray-300 self-start"
                }`}
              >
                {msg.sender === "bot" ? (
                  <ReactMarkdown
                  components={{
                    p: ({ children }) => <p className="mb-1">{children}</p>,
                    ul: ({ children }) => <ul className="list-disc ml-4">{children}</ul>,
                    li: ({ children }) => <li className="mb-1">{children}</li>,
                  }}
                >
                  {msg.text}
                </ReactMarkdown>
                
                ) : (
                  msg.text
                )}
              </div>
            ))}
            {isBotTyping && (
              <div className="text-gray-400 italic text-sm animate-pulse">
                Bot ƒëang tr·∫£ l·ªùi...
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
          <div className="p-3 border-t flex gap-2">
            <input
              type="text"
              placeholder="Nh·∫≠p tin nh·∫Øn..."
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={handleKeyDown}
              disabled={isBotTyping}
              className="flex-1 border rounded-[15px] px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-[#56D3C7] disabled:bg-gray-100 disabled:cursor-not-allowed"
            />
            <button
              onClick={handleSendClick}
              disabled={isBotTyping}
              className={`${
                isBotTyping ? "bg-gray-300 cursor-not-allowed" : "bg-[#56D3C7] hover:bg-[#3BAFA2]"
              } border-none text-white px-4 py-2 rounded-[15px] transition-all text-sm`}
            >
              G·ª≠i
            </button>
          </div>
        </div>
      ) : (
        <button
          onClick={() => setIsOpen(true)}
          className="w-[60px] h-[60px] bg-[#56D3C7] border-none rounded-full shadow-xl text-white flex items-center justify-center hover:bg-[#3BAFA2] transition-all
          transform transition-transform duration-200 ease-out
          hover:scale-110 hover:shadow-2xl
          active:scale-95"
        >
          <span className="text-white">
            <ChatIcon />
          </span>
        </button>
      )}
    </div>
  );
};

export default ChatBox;
